// Generated by Dagger (https://google.github.io/dagger).
package com.example.daggersample.student;

import dagger.internal.Factory;
import javax.inject.Provider;

public final class Student_Factory implements Factory<Student> {
  private final Provider<Address> addressProvider;

  private final Provider<Record> recordProvider;

  public Student_Factory(Provider<Address> addressProvider, Provider<Record> recordProvider) {
    this.addressProvider = addressProvider;
    this.recordProvider = recordProvider;
  }

  @Override
  public Student get() {
    return new Student(addressProvider.get(), recordProvider.get());
  }

  public static Student_Factory create(
      Provider<Address> addressProvider, Provider<Record> recordProvider) {
    return new Student_Factory(addressProvider, recordProvider);
  }

  public static Student newInstance(Address address, Record record) {
    return new Student(address, record);
  }
}
